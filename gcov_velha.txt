        -:    0:Source:velha.cpp
        -:    0:Graph:velha.gcno
        -:    0:Data:velha.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "velha.hpp"
        -:    2:
       27:    3:int CheckTicTacToeResult(int hash[3][3]) {
       27:    4:    bool xWon = false, oWon = false;
       27:    5:    int xCount = 0;
       27:    6:    int oCount = 0;
        -:    7:
        -:    8:    // Verifica linhas
      108:    9:    for (int i = 0; i < 3; i++) {
       81:   10:        if (hash[i][0] == hash[i][1] && hash[i][1] == hash[i][2]) {
       18:   11:            if (hash[i][0] == 1) xWon = true;
       11:   12:            else if (hash[i][0] == 2) oWon = true;
        -:   13:        }
        -:   14:    }
        -:   15:
        -:   16:    // Verifica colunas
      108:   17:    for (int j = 0; j < 3; j++) {
       81:   18:        if (hash[0][j] == hash[1][j] && hash[1][j] == hash[2][j]) {
       15:   19:            if (hash[0][j] == 1) xWon = true;
        9:   20:            else if (hash[0][j] == 2) oWon = true;
        -:   21:        }
        -:   22:    }
        -:   23:
        -:   24:    // Verifica diagonais
       27:   25:    if (hash[0][0] == hash[1][1] && hash[1][1] == hash[2][2]) {
        7:   26:        if (hash[0][0] == 1) xWon = true;
        4:   27:        else if (hash[0][0] == 2) oWon = true;
        -:   28:    }
       27:   29:    if (hash[0][2] == hash[1][1] && hash[1][1] == hash[2][0]) {
        5:   30:        if (hash[0][2] == 1) xWon = true;
        3:   31:        else if (hash[0][2] == 2) oWon = true;
        -:   32:    }
        -:   33:
        -:   34:    // Contagem de jogadas
      108:   35:    for (int i = 0; i < 3; i++) {
      324:   36:    for (int j = 0; j < 3; j++) {
      243:   37:        if (hash[i][j] == 1) xCount++;
      159:   38:        else if (hash[i][j] == 2) oCount++;
        -:   39:    }    
        -:   40:    }
        -:   41:
       27:   42:    if ((xCount - oCount > 1) || (oCount - xCount > 1)) {
        3:   43:        return -2; // Jogo impossível (diferença de peças > 1)
        -:   44:    }
        -:   45:    
        -:   46:    // Verifica empate ou jogo em andamento
       24:   47:    bool hasEmptySpace = false;
       57:   48:    for (int i = 0; i < 3 && !hasEmptySpace; i++) {
       82:   49:        for (int j = 0; j < 3; j++) {
       72:   50:            if (hash[i][j] == 0) {
       23:   51:                hasEmptySpace = true;
       23:   52:                break;
        -:   53:            }
        -:   54:        }
        -:   55:    }
        -:   56:
       24:   57:    if (xWon && oWon) return -2;  // Ambos venceram (inválido)
       23:   58:    if (xCount == 9) return -2;   // Todas as posições = X
       23:   59:    if (oCount == 9) return -2;   // Todas as posições = O
       23:   60:    if (xWon) return (xCount >= oCount) ? 1 : -2;  // Verifica vitória de X e contagem de jogadas
       14:   61:    if (oWon) return (oCount >= xCount) ? 2 : -2;  // Verifica vitória de O e contagem de jogadas
        5:   62:    if (!hasEmptySpace) return 0; // Empate
        4:   63:    return -1;                    // Jogo em andamento
        -:   64:}
